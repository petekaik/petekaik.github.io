{"version":3,"sources":["components/repo.jsx","components/repos.jsx","App.js","serviceWorker.js","index.js"],"names":["Repo","state","repo","this","props","react_default","a","createElement","className","href","html_url","name","description","Component","Repos","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this2","fetch","then","response","json","data","setState","_this3","length","repos","keys","map","key","console","log","components_repo","id","App","Fragment","components_repos","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ca32c117.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Repo extends Component {\r\n  state = {};\r\n  render() {\r\n    const { repo } = this.props;\r\n    return (\r\n      <div className=\"repo\">\r\n        <p className=\"reponame\">\r\n          <a className=\"App-link\" href={repo.html_url}>\r\n            {repo.name}\r\n          </a>\r\n        </p>\r\n        <p className=\"repodescription\">{repo.description}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Repo;\r\n","import React, { Component } from \"react\";\r\nimport Repo from \"./repo\";\r\n\r\nclass Repos extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = [];\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.github.com/users/petekaik/repos\")\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        //console.log(data);\r\n        this.setState(data);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.length !== 0) {\r\n      //return <p>{JSON.stringify(this.state)}</p>;\r\n      const repos = Object.keys(this.state).map(key => this.state[key]);\r\n      console.log(repos);\r\n      return repos.map(repo => <Repo key={repo.id} repo={repo} />);\r\n      //return <p>Processing...</p>;\r\n    } else {\r\n      return (\r\n        //https://loading.io/css/\r\n        <div className=\"lds-ripple\">\r\n          <div />\r\n          <div />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Repos;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Repos from \"./components/repos.jsx\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"App-header\">Pete's Github Repos</div>\n        <div className=\"App-content\">\n          <Repos />\n        </div>\n        <div className=\"App-footer\">\n          <a\n            href=\"https://www.linkedin.com/in/petterikaikkonen/\"\n            className=\"App-link\"\n          >\n            My Linkedin Profile\n          </a>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}